const koa = require('koa');
const app = new koa();


//整理一下，js里面的异步：
//1.setTimeout(),setInterval()定时器
//2.事件处理函数 ,鼠标事件和键盘事件
//3.ajax异步
//4. <img> <script></script> <video>是异步的.

//我们在写代码的时候可以按照这样的思路来写：
//首先，我们将可能会出现堵塞的任务作为异步任务，将普通代码作为同步任务，服务器会优先
//去执行同步代码，当同步代码执行完毕之后，再去执行可能会出现堵塞的异步任务.
//这样，就大大提高了服务器的运行效率和代码的可执行效率.
app.use(async ctx=>{
    ctx.body = 'hello world';
})

//异步的实现原理：JS是单线程的，也就是说JS只有一条执行线---主线程,JS把所有的代码分为两类，第一类代码是同步执行的代码，第二类是异步的代码.
//浏览器的主线程会从同步代码的起始位置开始执行，它遇到异步代码的时候就会把异步代码放到事件监听器里面 (event loop),如果异步任务的触发条件没有满足的话，它会跳过异步任务，继续往下执行。等异步任务的条件满足的时候，再回过头来执行异步代码。异步代码执行完，最终返回主线程..这时候，如果代码已经全部结束的话，那么浏览器会处在挂起状态，等待剩余的异步任务被触发.....


//总结:所有的koa处理请求的函数全部都是异步的.异步可以减少代码的阻塞，增加代码的执行效率.
//异步的三种形式：
//1.回调函数
//2.事件监听 （nodeJS的异步实现原理就是使用的事件监听） event loop事件监听器.
//3.promise




//异步的缺点：如果任务之间有依赖关系的话，那么异步会出现管理上的问题，到底先执行谁？谁先被执行....

app.listen(3000,()=>{
    console.log('node is OK');
})